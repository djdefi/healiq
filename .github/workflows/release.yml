name: Release

on:
  workflow_dispatch:
    inputs:
      publish_to_curseforge:
        description: 'Publish to CurseForge'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Extract version from .toc file
      id: version
      run: |
        VERSION=$(grep "^## Version:" HealIQ.toc | cut -d' ' -f3)
        INTERFACE=$(grep "^## Interface:" HealIQ.toc | cut -d' ' -f3)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "interface=$INTERFACE" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        echo "Extracted interface: $INTERFACE"
        
    - name: Get previous version tag
      id: prev_version
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, this might be the first release"
          echo "prev_tag=initial" >> $GITHUB_OUTPUT
        else
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        fi
        echo "Previous version tag: $PREV_TAG"
        
    - name: Check if tag already exists
      id: check_tag
      run: |
        if git tag -l | grep -q "^v${{ steps.version.outputs.version }}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} does not exist"
        fi
        
    - name: Generate and update changelog
      if: steps.check_tag.outputs.exists == 'false'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Generating enhanced changelog entries with AI WoW flair for version ${{ steps.version.outputs.version }}..."
        
        # Install GitHub models extension for AI functionality
        echo "Installing GitHub models extension for AI enhancement..."
        gh extension install github/gh-models || echo "Failed to install models extension, AI enhancement may not work"
        
        # Make sure the enhanced changelog script is executable
        chmod +x .github/scripts/generate-changelog-enhanced.sh
        chmod +x .github/scripts/enhance-changelog-with-wow-flair.sh
        
        # Generate enhanced changelog from previous version to current
        if [ "${{ steps.prev_version.outputs.prev_tag }}" = "initial" ]; then
          echo "Generating enhanced changelog from initial commit..."
          ./.github/scripts/generate-changelog-enhanced.sh initial ${{ steps.version.outputs.version }}
        else
          echo "Generating enhanced changelog from ${{ steps.prev_version.outputs.prev_tag }} to ${{ steps.version.outputs.version }}..."
          ./.github/scripts/generate-changelog-enhanced.sh ${{ steps.prev_version.outputs.prev_tag }} ${{ steps.version.outputs.version }}
        fi
        
        echo "Enhanced changelog generation completed with AI WoW flair"
        
    - name: Validate changelog entry
      if: steps.check_tag.outputs.exists == 'false'
      id: validate_changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check if changelog entry exists for this version
        if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "ERROR: No changelog entry found for version $VERSION"
          exit 1
        fi
        
        # Extract the changelog section for this version
        SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1)
        
        # Check if all sections have only empty bullets
        ADDED_EMPTY=$(echo "$SECTION" | grep -A10 "### Added" | grep -E "^- $" | wc -l)
        CHANGED_EMPTY=$(echo "$SECTION" | grep -A10 "### Changed" | grep -E "^- $" | wc -l)
        FIXED_EMPTY=$(echo "$SECTION" | grep -A10 "### Fixed" | grep -E "^- $" | wc -l)
        
        # Count non-empty entries
        ADDED_CONTENT=$(echo "$SECTION" | grep -A10 "### Added" | grep -E "^- .+$" | grep -v "^- $" | wc -l)
        CHANGED_CONTENT=$(echo "$SECTION" | grep -A10 "### Changed" | grep -E "^- .+$" | grep -v "^- $" | wc -l)
        FIXED_CONTENT=$(echo "$SECTION" | grep -A10 "### Fixed" | grep -E "^- .+$" | grep -v "^- $" | wc -l)
        
        TOTAL_CONTENT=$((ADDED_CONTENT + CHANGED_CONTENT + FIXED_CONTENT))
        
        echo "Changelog validation results:"
        echo "- Added entries: $ADDED_CONTENT"
        echo "- Changed entries: $CHANGED_CONTENT"
        echo "- Fixed entries: $FIXED_CONTENT"
        echo "- Total content entries: $TOTAL_CONTENT"
        
        if [ $TOTAL_CONTENT -eq 0 ]; then
          echo "WARNING: Changelog entry for version $VERSION appears to be empty"
          echo "This suggests no significant changes were detected from commit messages."
          echo "Proceeding with release, but consider manually updating the changelog."
          echo "has_content=false" >> $GITHUB_OUTPUT
        else
          echo "Changelog entry validation passed!"
          echo "has_content=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit updated changelog
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        # Check if changelog was modified
        if git diff --quiet CHANGELOG.md; then
          echo "No changes to commit in CHANGELOG.md"
        else
          echo "Committing updated changelog..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "Update changelog for release v${{ steps.version.outputs.version }}"
          git push origin ${{ github.ref_name }}
          echo "Changelog committed and pushed"
        fi
        
    - name: Create Git tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
        
    - name: Create addon package
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        mkdir -p dist/HealIQ
        
        # Copy addon files to package directory
        cp *.lua dist/HealIQ/
        cp HealIQ.toc dist/HealIQ/
        cp README.md dist/HealIQ/
        cp LICENSE dist/HealIQ/
        cp CHANGELOG.md dist/HealIQ/
        cp INSTALL.md dist/HealIQ/
        
        # Copy rules directory and all its contents (CRITICAL: prevents v0.1.12-style missing files issue)
        if [ -d "rules" ]; then
          cp -r rules/ dist/HealIQ/
          echo "‚úÖ Copied rules/ directory with $(find rules/ -name "*.lua" | wc -l) rule files"
        else
          echo "‚ùå ERROR: rules/ directory not found!"
          exit 1
        fi
        
        # Validate all expected files are present in the package
        echo "üîç Validating package contents..."
        
        # Check all TOC-referenced files are included
        missing_files=()
        while IFS= read -r line; do
          # Skip comments and empty lines
          if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
            continue
          fi
          # Trim whitespace
          file=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if [[ -n "$file" && "$file" == *.lua ]]; then
            if [ ! -f "dist/HealIQ/$file" ]; then
              missing_files+=("$file")
            fi
          fi
        done < HealIQ.toc
        
        # Check critical non-Lua files
        critical_files=("HealIQ.toc" "README.md" "LICENSE" "CHANGELOG.md" "INSTALL.md")
        for file in "${critical_files[@]}"; do
          if [ ! -f "dist/HealIQ/$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        # Report validation results
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "‚úÖ All expected files are present in the package!"
          echo "üìÅ Package contents:"
          find dist/HealIQ -type f | sort
          echo ""
          echo "üìä Package statistics:"
          echo "  - Total files: $(find dist/HealIQ -type f | wc -l)"
          echo "  - Lua files: $(find dist/HealIQ -name "*.lua" | wc -l)"
          echo "  - Rules files: $(find dist/HealIQ/rules -name "*.lua" 2>/dev/null | wc -l)"
        else
          echo "‚ùå ERROR: Missing files in package:"
          for file in "${missing_files[@]}"; do
            echo "  - $file"
          done
          echo ""
          echo "This would cause a broken addon release. Aborting."
          exit 1
        fi
        
        # Create zip file
        cd dist
        zip -r "../HealIQ-${{ steps.version.outputs.version }}.zip" HealIQ/
        cd ..
        
        # Create files list for release notes
        echo "## Files included in this release:" > release_notes.md
        echo "" >> release_notes.md
        echo "- All Lua addon files" >> release_notes.md
        echo "- HealIQ.toc (addon metadata)" >> release_notes.md
        echo "- README.md, LICENSE, CHANGELOG.md, INSTALL.md" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation:" >> release_notes.md
        echo "1. Download the \`HealIQ-${{ steps.version.outputs.version }}.zip\` file" >> release_notes.md
        echo "2. Extract to your WoW \`Interface/AddOns/\` directory" >> release_notes.md
        echo "3. Enable the addon in-game" >> release_notes.md
        echo "" >> release_notes.md
        echo "See INSTALL.md for detailed installation instructions." >> release_notes.md
        
        # Extract changelog for this version if it exists
        if grep -q "## \[${{ steps.version.outputs.version }}\]" CHANGELOG.md; then
          echo "" >> release_notes.md
          echo "## Changelog:" >> release_notes.md
          echo "" >> release_notes.md
          # Extract changelog section for this version
          sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> release_notes.md
        fi
        
    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: HealIQ v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: HealIQ-${{ steps.version.outputs.version }}.zip
        
    - name: Convert interface version to game version
      if: steps.check_tag.outputs.exists == 'false'
      id: game_version
      run: |
        # Function to convert WoW interface version to game version
        convert_interface_version() {
          local interface="$1"
          
          # WoW interface versions follow format: MMNNPP or MNNPP
          # MM/M = major, NN = minor, PP = patch
          if [[ $interface =~ ^([0-9]+)$ ]] && [ ${#interface} -ge 5 ] && [ ${#interface} -le 6 ]; then
            if [ ${#interface} -eq 6 ]; then
              # 6 digits: MMNNPP (e.g., 110107 -> 11.0.7)
              local major="${interface:0:2}"
              local minor_raw="${interface:2:2}"
              local patch_raw="${interface:4:2}"
            else
              # 5 digits: MNNPP (e.g., 90205 -> 9.2.5)
              local major="${interface:0:1}"
              local minor_raw="${interface:1:2}"
              local patch_raw="${interface:3:2}"
            fi
            
            # Convert to decimal, handling leading zeros
            local minor="$((10#$minor_raw))"
            local patch="$((10#$patch_raw))"
            
            # Generic rule: if minor raw is "01", it represents 0
            if [ "$minor_raw" = "01" ]; then
              minor="0"
            fi
            
            echo "${major}.${minor}.${patch}"
          else
            # Fallback: try to extract numeric major version or use current retail
            if [[ $interface =~ ^([0-9]+) ]]; then
              local major_fallback="${BASH_REMATCH[1]}"
              if [ ${#major_fallback} -gt 2 ]; then
                major_fallback="${major_fallback:0:2}"
              fi
              echo "${major_fallback}.0.0"
            else
              echo "11.0.7"  # Hard fallback to current retail
            fi
          fi
        }
        
        INTERFACE="${{ steps.version.outputs.interface }}"
        GAME_VERSION=$(convert_interface_version "$INTERFACE")
        
        echo "game_version=$GAME_VERSION" >> $GITHUB_OUTPUT
        echo "Using game version: $GAME_VERSION for interface $INTERFACE"
        
    - name: Read release notes for CurseForge
      if: steps.check_tag.outputs.exists == 'false'
      id: release_notes
      run: |
        if [ -f "release_notes.md" ]; then
          # Read the content and handle multiline output properly
          {
            echo "content<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT
        else
          echo "content=No release notes available" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload to CurseForge
      if: steps.check_tag.outputs.exists == 'false' && (github.event_name == 'push' || github.event.inputs.publish_to_curseforge == 'true')
      uses: itsmeow/curseforge-upload@v3
      with:
        token: ${{ secrets.CURSEFORGE_TOKEN }}
        project_id: ${{ secrets.CURSEFORGE_PROJECT_ID }}
        game_endpoint: wow
        file_path: HealIQ-${{ steps.version.outputs.version }}.zip
        display_name: v${{ steps.version.outputs.version }}
        changelog_type: markdown
        changelog: ${{ steps.release_notes.outputs.content }}
        game_versions: ${{ steps.game_version.outputs.game_version }}
        release_type: release
