name: Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Lua
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.1 lua5.4 luarocks bc
        
    - name: Install luacheck and luacov
      run: |
        sudo luarocks install luacheck
        sudo luarocks install luacov
        
    - name: Run Lua syntax check
      run: |
        echo "Checking Lua syntax for all .lua files..."
        for file in *.lua; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            luac -p "$file" || (echo "Syntax error in $file" && exit 1)
          fi
        done
        
    - name: Run luacheck linting
      run: |
        echo "Running luacheck on all .lua files..."
        luacheck *.lua --globals _G --std none --ignore 11 --ignore 21 --ignore 131 --ignore 143 --ignore 213 --ignore 311 --ignore 312 --ignore 631 --ignore 611 --ignore 432 --ignore 212 --ignore 211 --ignore 231 --ignore 111 --ignore 112 --ignore 113
        
    - name: Validate addon structure
      run: |
        echo "Validating HealIQ addon structure..."
        
        # Check that .toc file exists
        if [ ! -f "HealIQ.toc" ]; then
          echo "ERROR: HealIQ.toc file is missing"
          exit 1
        fi
        
        # Check that core Lua files exist
        missing_files=()
        for file in Core.lua Engine.lua UI.lua Tracker.lua Config.lua; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "ERROR: Missing required files: ${missing_files[*]}"
          exit 1
        fi
        
        # Validate .toc file format
        echo "Validating .toc file format..."
        if ! grep -q "^## Interface:" HealIQ.toc; then
          echo "ERROR: Missing Interface version in .toc file"
          exit 1
        fi
        
        if ! grep -q "^## Title:" HealIQ.toc; then
          echo "ERROR: Missing Title in .toc file"
          exit 1
        fi
        
        if ! grep -q "^## Version:" HealIQ.toc; then
          echo "ERROR: Missing Version in .toc file"
          exit 1
        fi
        
        # Check that all files listed in .toc exist
        echo "Checking that all files listed in .toc exist..."
        grep -v "^#" HealIQ.toc | grep -v "^$" | while read -r file; do
          if [ ! -f "$file" ]; then
            echo "ERROR: File $file listed in .toc but not found"
            exit 1
          fi
        done
        
        echo "All addon structure validations passed!"
        
    - name: Validate release package integrity (prevent missing files)
      run: |
        echo "Validating that a release package would include all required files..."
        
        # Simulate the release package creation process
        mkdir -p test_package/HealIQ
        
        # Copy files exactly like the release workflow
        cp *.lua test_package/HealIQ/
        cp HealIQ.toc test_package/HealIQ/
        cp README.md test_package/HealIQ/ 2>/dev/null || echo "README.md not required for validation"
        cp LICENSE test_package/HealIQ/ 2>/dev/null || echo "LICENSE not required for validation"
        cp CHANGELOG.md test_package/HealIQ/ 2>/dev/null || echo "CHANGELOG.md not required for validation"
        cp INSTALL.md test_package/HealIQ/ 2>/dev/null || echo "INSTALL.md not required for validation"
        
        # Copy rules directory
        if [ -d "rules" ]; then
          cp -r rules/ test_package/HealIQ/
          echo "‚úÖ Copied rules/ directory"
        else
          echo "‚ùå ERROR: rules/ directory not found!"
          exit 1
        fi
        
        # Validate all TOC-referenced files are included
        echo "Checking that all .toc files are in the test package..."
        missing_files=()
        while IFS= read -r line; do
          # Skip comments and empty lines
          if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
            continue
          fi
          # Trim whitespace
          file=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if [[ -n "$file" && "$file" == *.lua ]]; then
            if [ ! -f "test_package/HealIQ/$file" ]; then
              missing_files+=("$file")
            fi
          fi
        done < HealIQ.toc
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "‚úÖ All TOC-referenced files would be included in release package!"
          echo "üìÅ Test package contents:"
          find test_package/HealIQ -type f | sort
          echo "üìä Files: $(find test_package/HealIQ -type f | wc -l), Rules files: $(find test_package/HealIQ/rules -name "*.lua" 2>/dev/null | wc -l)"
        else
          echo "‚ùå ERROR: These files from .toc would be MISSING from release package:"
          for file in "${missing_files[@]}"; do
            echo "  - $file"
          done
          echo ""
          echo "This indicates the release workflow needs to be updated!"
          exit 1
        fi
        
        # Clean up test files
        rm -rf test_package
        
        echo "Release package validation passed!"
        
    - name: Run HealIQ release packaging regression test
      run: |
        echo "Running HealIQ release packaging regression test..."
        if [ -f "test_release_packaging.lua" ]; then
          echo "Executing release packaging validation..."
          lua5.1 test_release_packaging.lua
          echo "Release packaging regression test completed successfully!"
        else
          echo "Release packaging regression test file not found, skipping"
        fi
        
    - name: Check addon version consistency
      run: |
        echo "Checking version consistency..."
        
        # Extract version from .toc file
        TOC_VERSION=$(grep "^## Version:" HealIQ.toc | cut -d' ' -f3)
        echo "Version in HealIQ.toc: $TOC_VERSION"
        
        # Extract version from Core.lua
        CORE_VERSION=$(grep "HealIQ.version = " Core.lua | cut -d'"' -f2)
        echo "Version in Core.lua: $CORE_VERSION"
        
        if [ "$TOC_VERSION" != "$CORE_VERSION" ]; then
          echo "ERROR: Version mismatch between HealIQ.toc ($TOC_VERSION) and Core.lua ($CORE_VERSION)"
          exit 1
        fi
        
        echo "Version consistency check passed!"
        
    - name: Run HealIQ packaging validation tests
      run: |
        echo "Running HealIQ packaging validation tests..."
        if [ -f "test_packaging.lua" ]; then
          echo "Executing packaging validation..."
          lua5.1 test_packaging.lua
          echo "Packaging validation tests completed successfully!"
        else
          echo "Packaging validation test file not found, skipping"
        fi
        
    - name: Run HealIQ loading order tests
      run: |
        echo "Running HealIQ loading order regression tests..."
        if [ -f "ci_test_loading_order.lua" ]; then
          echo "Executing loading order validation..."
          lua5.1 ci_test_loading_order.lua
          echo "Loading order tests completed successfully!"
        elif [ -f "test_loading_order.lua" ]; then
          echo "Executing comprehensive loading order tests..."
          lua5.1 test_loading_order.lua
          echo "Loading order tests completed successfully!"
        else
          echo "Loading order test file not found, skipping"
        fi
        
    - name: Run HealIQ quick validation
      run: |
        echo "Running HealIQ quick validation..."
        if [ -f "validate_runner.lua" ] && [ -f "Tests.lua" ]; then
          echo "Executing HealIQ quick validation..."
          lua5.1 validate_runner.lua
          echo "Quick validation completed successfully!"
        else
          echo "Validation files not found, skipping validation"
        fi
        
    - name: Run HealIQ logic tests with coverage
      run: |
        echo "Running HealIQ logic tests with coverage analysis..."
        if [ -f "test_runner.lua" ] && [ -f "Tests.lua" ]; then
          echo "Setting up LuaCov configuration..."
          
          # Create LuaCov configuration
          cat > .luacov << 'EOF'
        -- LuaCov configuration for HealIQ
        return {
          statsfile = "luacov.stats.out",
          reportfile = "luacov.report.out",
          
          -- Include patterns (files to track)
          include = {
            "Core%.lua$",
            "Engine%.lua$", 
            "UI%.lua$",
            "Tracker%.lua$",
            "Config%.lua$",
            "Logging%.lua$"
          },
          
          -- Exclude patterns (files to ignore)
          exclude = {
            "Tests%.lua$",
            "test_runner%.lua$",
            "validate_runner%.lua$",
            "coverage_analysis%.lua$"
          },
          
          -- Don't delete stats file on startup in CI
          deletestats = false,
          
          -- Modules to preload for coverage
          modules = {}
        }
        EOF
          
          echo "Executing HealIQ test suite with coverage..."
          lua5.1 -lluacov test_runner.lua
          
          echo "Checking for coverage files..."
          ls -la luacov.* || echo "No luacov files found"
          
          echo "Generating coverage report..."
          luacov || echo "luacov command failed, but continuing..."
          
          echo "Checking generated files..."
          ls -la luacov.* || echo "No luacov files after report generation"
          
          echo "Logic tests completed successfully!"
        else
          echo "Test files not found, skipping logic tests"
        fi
        
    - name: Generate coverage summary
      run: |
        echo "Generating code coverage summary..."
        echo "=== Code Coverage Report ===" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run enhanced coverage analysis (don't fail build if it has issues)
        if [ -f "coverage_analysis.lua" ]; then
          echo "Running enhanced coverage analysis..."
          if lua5.1 coverage_analysis.lua > coverage_summary.txt 2>&1; then
            echo "Coverage analysis completed successfully"
          else
            echo "Coverage analysis had issues, but continuing..."
          fi
          
          # Extract summary for GitHub Actions Summary
          OVERALL_COVERAGE=$(grep "Overall Coverage:" coverage_summary.txt | grep -o '[0-9]\+\.[0-9]\+%' | head -1 || echo "N/A")
          COVERAGE_LINES=$(grep "Overall Coverage:" coverage_summary.txt | grep -o '([0-9]\+/[0-9]\+' | head -1 | tr -d '(' || echo "N/A")
          
          if [ "$OVERALL_COVERAGE" != "N/A" ] && [ -n "$OVERALL_COVERAGE" ]; then
            echo "üìä **Overall Coverage: ${OVERALL_COVERAGE}** (${COVERAGE_LINES} executable lines)" >> $GITHUB_STEP_SUMMARY
            
            # Coverage badge color
            COVERAGE_NUM=$(echo $OVERALL_COVERAGE | tr -d '%')
            if (( $(echo "$COVERAGE_NUM >= 80" | bc -l) )); then
              BADGE_COLOR="brightgreen"
            elif (( $(echo "$COVERAGE_NUM >= 60" | bc -l) )); then
              BADGE_COLOR="yellow"
            else
              BADGE_COLOR="red"
            fi
            
            echo "![Coverage](https://img.shields.io/badge/coverage-${OVERALL_COVERAGE}-${BADGE_COLOR})" >> $GITHUB_STEP_SUMMARY
          else
            echo "üìä **Coverage data not available**" >> $GITHUB_STEP_SUMMARY
            echo "Coverage tracking may need adjustment for CI environment" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "üìä **Coverage tracking setup in progress**" >> $GITHUB_STEP_SUMMARY
          echo "Enhanced coverage analysis not available in this build" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### File Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| File | Coverage | Lines | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Parse file coverage from enhanced analysis
        if [ -f "coverage_summary.txt" ]; then
          grep -A 20 "File Coverage Details:" coverage_summary.txt | grep "\.lua:" | while read -r line; do
            FILE=$(echo "$line" | awk -F: '{print $1}')
            COVERAGE=$(echo "$line" | grep -o '[0-9]\+\.[0-9]\+%' || echo "0.0%")
            LINES=$(echo "$line" | grep -o '([^)]*' | tr -d '(' || echo "0/0")
            
            # Status based on coverage
            COVERAGE_NUM=$(echo $COVERAGE | tr -d '%' || echo "0")
            if [ "$COVERAGE_NUM" != "0" ] && (( $(echo "$COVERAGE_NUM >= 80" | bc -l) )); then
              STATUS="‚úÖ Good"
            elif [ "$COVERAGE_NUM" != "0" ] && (( $(echo "$COVERAGE_NUM >= 60" | bc -l) )); then
              STATUS="‚ö†Ô∏è Fair"
            else
              STATUS="‚ùå Poor"
            fi
            
            echo "| $FILE | $COVERAGE | $LINES | $STATUS |" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "| No coverage data available | N/A | N/A | ‚ö†Ô∏è Pending |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Full Coverage Analysis</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        if [ -f "coverage_summary.txt" ]; then
          cat coverage_summary.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
        fi
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        
        # Also output to console
        echo "Coverage Summary:"
        echo "=================="
        if [ -f "coverage_summary.txt" ]; then
          cat coverage_summary.txt
        else
          echo "Coverage analysis may need further setup in CI environment"
        fi
        echo ""
        echo "See full report in GitHub Actions Summary tab"
